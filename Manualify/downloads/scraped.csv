,fname,text
0,,". 3. An Informal Introduction to Python In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and …): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command. You can toggle the display of prompts and output by clicking on >>> in the upper-right corner of an example box. If you hide the prompts and output for an example, then you can easily copy and paste the input lines into your interpreter. Many of the examples in this manual, even those entered at the interactive prompt, include comments. Comments in Python start with the hash character, #, and extend to the end of the physical line. A comment may appear at the start of a line or following whitespace or code, but not within a string literal. A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples. Some examples: # this is the first comment spam = 1 # and this is the second comment   # ... and now a third! text = ""# This is not a comment because it's inside quotes."" 3.1. Using Python as a Calculator Let’s try some simple Python commands. Start the interpreter and wait for the primary prompt, >>>. (It shouldn’t take long.) 3.1.1. Numbers The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is straightforward: the operators +, -, * and / can be used to perform arithmetic; parentheses (()) can be used for grouping. For example: >>> 2 + 2 4 50 - 5*6 20 (50 - 5*6) / 4 5.0 8 / 5 # division always returns a floating point number 1.6 The integer numbers (e.g. 2, 4, 20) have type int, the ones with a fractional part (e.g. 5.0, 1.6) have type float. We will see more about numeric types later in the tutorial. Division (/) always returns a float. To do floor division and get an integer result you can use the // operator; to calculate the remainder you can use %: >>> 17 / 3 # classic division returns a float 5.666666666666667 17 // 3 # floor division discards the fractional part 5 17 % 3 # the % operator returns the remainder of the division 2 5 * 3 + 2 # floored quotient * divisor + remainder 17 With Python, it is possible to use the ** operator to calculate powers [1]: >>> 5 ** 2 # 5 squared 25 2 ** 7 # 2 to the power of 7 128 The equal sign (=) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt: >>> width = 20 height = 5 * 9 width * height 900 If a variable is not “defined” (assigned a value), trying to use it will give you an error: >>> n # try to access an undefined variable Traceback (most recent call last): File ""<stdin>"", line 1, in <module> NameError: name 'n' is not defined There is full support for floating point; operators with mixed type operands convert the integer operand to floating point: >>> 4 * 3.75 - 1 14.0 In interactive mode, the last printed expression is assigned to the variable _. This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example: >>> tax = 12.5 / 100 price = 100.50 price * tax 12.5625 price + _ 113.0625 round(_, 2) 113.06 This variable should be treated as read-only by the user. Don’t explicitly assign a value to it — you would create an independent local variable with the same name masking the built-in variable with its magic behavior. In addition to int and float, Python supports other types of numbers, such as Decimal and Fraction. Python also has built-in support for complex numbers, and uses the j or J suffix to indicate the imaginary part (e.g. 3+5j). 3.1.2. Text Python can manipulate text (represented by type str, so-called “strings”) as well as numbers. This includes characters “!”, words “rabbit”, names “Paris”, sentences “Got your back.”, etc. “Yay! :)”. They can be enclosed in single quotes ('...') or double quotes (""..."") with the same result [2]. >>> 'spam eggs' # single quotes 'spam eggs' ""Paris rabbit got your back :)! Yay!"" # double quotes 'Paris rabbit got your back :)! Yay!' '1975' # digits and numerals enclosed in quotes are also strings '1975' To quote a quote, we need to “escape” it, by preceding it with \. Alternatively, we can use the other type of quotation marks: >>> 'doesn\'t' # use \' to escape the single quote... ""doesn't"" ""doesn't"" # ...or use double quotes instead ""doesn't"" '""Yes,"" they said.' '""Yes,"" they said.' ""\""Yes,\"" they said."" '""Yes,"" they said.' '""Isn\'t,"" they said.' '""Isn\'t,"" they said.' In the Python shell, the string definition and output string can look different. The print() function produces a more readable output, by omitting the enclosing quotes and by printing escaped and special characters: >>> s = 'First line. Second line.' # means newline s # without print(), special characters are included in the string 'First line. Second line.' print(s) # with print(), special characters are interpreted, so produces new line First line. Second line. If you don’t want characters prefaced by \ to be interpreted as special characters, you can use raw strings by adding an r before the first quote: >>> print('C:\some ame') # here means newline! C:\some ame print(r'C:\some ame') # note the r before the quote C:\some ame There is one subtle aspect to raw strings: a raw string may not end in an odd number of \ characters; see the FAQ entry for more information and workarounds. String literals can span multiple lines. One way is using triple-quotes: """"""..."""""" or '''...'''. End of lines are automatically included in the string, but it’s possible to prevent this by adding a \ at the end of the line. The following example: print(""""""\ Usage: thingy [OPTIONS]  -h      Display this usage message  -H hostname    Hostname to connect to """""") produces the following output (note that the initial newline is not included): Usage: thingy [OPTIONS]  -h      Display this usage message  -H hostname    Hostname to connect to Strings can be concatenated (glued together) with the + operator, and repeated with *: >>> # 3 times 'un', followed by 'ium' 3 * 'un' + 'ium' 'unununium' Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically concatenated. >>> 'Py' 'thon' 'Python' This feature is particularly useful when you want to break long strings: >>> text = ('Put several strings within parentheses '   'to have them joined together.') text 'Put several strings within parentheses to have them joined together.' This only works with two literals though, not with variables or expressions: >>> prefix = 'Py' prefix 'thon' # can't concatenate a variable and a string literal File ""<stdin>"", line 1  prefix 'thon'   ^^^^^^ SyntaxError: invalid syntax ('un' * 3) 'ium' File ""<stdin>"", line 1  ('un' * 3) 'ium'    ^^^^^ SyntaxError: invalid syntax If you want to concatenate variables or a variable and a literal, use +: >>> prefix + 'thon' 'Python' Strings can be indexed (subscripted), with the first character having index 0. There is no separate character type; a character is simply a string of size one: >>> word = 'Python' word[0] # character in position 0 'P' word[5] # character in position 5 'n' Indices may also be negative numbers, to start counting from the right: >>> word[-1] # last character 'n' word[-2] # second-last character 'o' word[-6] 'P' Note that since -0 is the same as 0, negative indices start from -1. In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters, slicing allows you to obtain a substring: >>> word[0:2] # characters from position 0 (included) to 2 (excluded) 'Py' word[2:5] # characters from position 2 (included) to 5 (excluded) 'tho' Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced. >>> word[:2] # character from the beginning to position 2 (excluded) 'Py' word[4:] # characters from position 4 (included) to the end 'on' word[-2:] # characters from the second-last (included) to the end 'on' Note how the start is always included, and the end always excluded. This makes sure that s[:i] + s[i:] is always equal to s: >>> word[:2] + word[2:] 'Python' word[:4] + word[4:] 'Python' One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n, for example: +---+---+---+---+---+---+ | P | y | t | h | o | n | +---+---+---+---+---+---+ 0 1 2 3 4 5 6 -6 -5 -4 -3 -2 -1 The first row of numbers gives the position of the indices 0…6 in the string; the second row gives the corresponding negative indices. The slice from i to j consists of all characters between the edges labeled i and j, respectively. For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. For example, the length of word[1:3] is 2. Attempting to use an index that is too large will result in an error: >>> word[42] # the word only has 6 characters Traceback (most recent call last): File ""<stdin>"", line 1, in <module> IndexError: string index out of range However, out of range slice indexes are handled gracefully when used for slicing: >>> word[4:42] 'on' word[42:] '' Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the string results in an error: >>> word[0] = 'J' Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: 'str' object does not support item assignment word[2:] = 'py' Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: 'str' object does not support item assignment If you need a different string, you should create a new one: >>> 'J' + word[1:] 'Jython' word[:2] + 'py' 'Pypy' The built-in function len() returns the length of a string: >>> s = 'supercalifragilisticexpialidocious' len(s) 34 See also Text Sequence Type — str  Strings are examples of sequence types, and support the common operations supported by such types. String Methods  Strings support a large number of methods for basic transformations and searching. f-strings  String literals that have embedded expressions. Format String Syntax  Information about string formatting with str.format(). printf-style String Formatting  The old formatting operations invoked when strings are the left operand of the % operator are described in more detail here. 3.1.3. Lists Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type. >>> squares = [1, 4, 9, 16, 25] squares [1, 4, 9, 16, 25] Like strings (and all other built-in sequence types), lists can be indexed and sliced: >>> squares[0] # indexing returns the item 1 squares[-1] 25 squares[-3:] # slicing returns a new list [9, 16, 25] Lists also support operations like concatenation: >>> squares + [36, 49, 64, 81, 100] [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] Unlike strings, which are immutable, lists are a mutable type, i.e. it is possible to change their content: >>> cubes = [1, 8, 27, 65, 125] # something's wrong here 4 ** 3 # the cube of 4 is 64, not 65! 64 cubes[3] = 64 # replace the wrong value cubes [1, 8, 27, 64, 125] You can also add new items at the end of the list, by using the list.append() method (we will see more about methods later): >>> cubes.append(216) # add the cube of 6 cubes.append(7 ** 3) # and the cube of 7 cubes [1, 8, 27, 64, 125, 216, 343] Simple assignment in Python never copies data. When you assign a list to a variable, the variable refers to the existing list. Any changes you make to the list through one variable will be seen through all other variables that refer to it.: >>> rgb = [""Red"", ""Green"", ""Blue""] rgba = rgb id(rgb) == id(rgba) # they reference the same object True rgba.append(""Alph"") rgb [""Red"", ""Green"", ""Blue"", ""Alph""] All slice operations return a new list containing the requested elements. This means that the following slice returns a shallow copy of the list: >>> correct_rgba = rgba[:] correct_rgba[-1] = ""Alpha"" correct_rgba [""Red"", ""Green"", ""Blue"", ""Alpha""] rgba [""Red"", ""Green"", ""Blue"", ""Alph""] Assignment to slices is also possible, and this can even change the size of the list or clear it entirely: >>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] letters ['a', 'b', 'c', 'd', 'e', 'f', 'g'] # replace some values letters[2:5] = ['C', 'D', 'E'] letters ['a', 'b', 'C', 'D', 'E', 'f', 'g'] # now remove them letters[2:5] = [] letters ['a', 'b', 'f', 'g'] # clear the list by replacing all the elements with an empty list letters[:] = [] letters [] The built-in function len() also applies to lists: >>> letters = ['a', 'b', 'c', 'd'] len(letters) 4 It is possible to nest lists (create lists containing other lists), for example: >>> a = ['a', 'b', 'c'] n = [1, 2, 3] x = [a, n] x [['a', 'b', 'c'], [1, 2, 3]] x[0] ['a', 'b', 'c'] x[0][1] 'b' 3.2. First Steps Towards Programming Of course, we can use Python for more complicated tasks than adding two and two together. For instance, we can write an initial sub-sequence of the Fibonacci series as follows: >>> # Fibonacci series: # the sum of two elements defines the next a, b = 0, 1 while a < 10:  print(a)  a, b = b, a+b 0 1 1 2 3 5 8 This example introduces several new features.  The first line contains a multiple assignment: the variables a and b simultaneously get the new values 0 and 1. On the last line this is used again, demonstrating that the expressions on the right-hand side are all evaluated first before any of the assignments take place. The right-hand side expressions are evaluated from the left to the right.  The while loop executes as long as the condition (here: a < 10) remains true. In Python, like in C, any non-zero integer value is true; zero is false. The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false. The test used in the example is a simple comparison. The standard comparison operators are written the same as in C: < (less than), > (greater than), == (equal to), <= (less than or equal to), >= (greater than or equal to) and != (not equal to).  The body of the loop is indented: indentation is Python’s way of grouping statements. At the interactive prompt, you have to type a tab or space(s) for each indented line. In practice you will prepare more complicated input for Python with a text editor; all decent text editors have an auto-indent facility. When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line). Note that each line within a basic block must be indented by the same amount.  The print() function writes the value of the argument(s) it is given. It differs from just writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments, floating point quantities, and strings. Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this:  >>> i = 256*256 print('The value of i is', i) The value of i is 65536 The keyword argument end can be used to avoid the newline after the output, or end the output with a different string: >>> a, b = 0, 1 while a < 1000:  print(a, end=',')  a, b = b, a+b  0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987, Footnotes [1] Since ** has higher precedence than -, -3**2 will be interpreted as -(3**2) and thus result in -9. To avoid this and get 9, you can use (-3)**2. [2] Unlike other languages, special characters such as have the same meaning with both single ('...') and double (""..."") quotes. The only difference between the two is that within single quotes you don’t need to escape "" (but you have to escape \') and vice versa. "
1,,". 4. More Control Flow Tools As well as the while statement just introduced, Python uses a few more that we will encounter in this chapter. 4.1. if Statements Perhaps the most well-known statement type is the if statement. For example: >>> x = int(input(""Please enter an integer: "")) Please enter an integer: 42 if x < 0:  x = 0  print('Negative changed to zero') elif x == 0:  print('Zero') elif x == 1:  print('Single') else:  print('More') More There can be zero or more elif parts, and the else part is optional. The keyword ‘elif’ is short for ‘else if’, and is useful to avoid excessive indentation. An if … elif … elif … sequence is a substitute for the switch or case statements found in other languages. If you’re comparing the same value to several constants, or checking for specific types or attributes, you may also find the match statement useful. For more details see match Statements. 4.2. for Statements The for statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python’s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended): >>> # Measure some strings: words = ['cat', 'window', 'defenestrate'] for w in words:  print(w, len(w)) cat 3 window 6 defenestrate 12 Code that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection: # Create a sample collection users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'} # Strategy: Iterate over a copy for user, status in users.copy().items():  if status == 'inactive':   del users[user] # Strategy: Create a new collection active_users = {} for user, status in users.items():  if status == 'active':   active_users[user] = status 4.3. The range() Function If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates arithmetic progressions: >>> for i in range(5):  print(i) 0 1 2 3 4 The given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the ‘step’): >>> list(range(5, 10)) [5, 6, 7, 8, 9] list(range(0, 10, 3)) [0, 3, 6, 9] list(range(-10, -100, -30)) [-10, -40, -70] To iterate over the indices of a sequence, you can combine range() and len() as follows: >>> a = ['Mary', 'had', 'a', 'little', 'lamb'] for i in range(len(a)):  print(i, a[i]) 0 Mary 1 had 2 a 3 little 4 lamb In most such cases, however, it is convenient to use the enumerate() function, see Looping Techniques. A strange thing happens if you just print a range: >>> range(10) range(0, 10) In many ways the object returned by range() behaves as if it is a list, but in fact it isn’t. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn’t really make the list, thus saving space. We say such an object is iterable, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the for statement is such a construct, while an example of a function that takes an iterable is sum(): >>> sum(range(4)) # 0 + 1 + 2 + 3 6 Later we will see more functions that return iterables and take iterables as arguments. In chapter Data Structures, we will discuss in more detail about list(). 4.4. break and continue Statements, and else Clauses on Loops The break statement breaks out of the innermost enclosing for or while loop. A for or while loop can include an else clause. In a for loop, the else clause is executed after the loop reaches its final iteration. In a while loop, it’s executed after the loop’s condition becomes false. In either kind of loop, the else clause is not executed if the loop was terminated by a break. This is exemplified in the following for loop, which searches for prime numbers: >>> for n in range(2, 10):  for x in range(2, n):   if n % x == 0:    print(n, 'equals', x, '*', n//x)    break  else:   # loop fell through without finding a factor   print(n, 'is a prime number') 2 is a prime number 3 is a prime number 4 equals 2 * 2 5 is a prime number 6 equals 2 * 3 7 is a prime number 8 equals 2 * 4 9 equals 3 * 3 (Yes, this is the correct code. Look closely: the else clause belongs to the for loop, not the if statement.) When used with a loop, the else clause has more in common with the else clause of a try statement than it does with that of if statements: a try statement’s else clause runs when no exception occurs, and a loop’s else clause runs when no break occurs. For more on the try statement and exceptions, see Handling Exceptions. The continue statement, also borrowed from C, continues with the next iteration of the loop: >>> for num in range(2, 10):  if num % 2 == 0:   print(""Found an even number"", num)   continue  print(""Found an odd number"", num) Found an even number 2 Found an odd number 3 Found an even number 4 Found an odd number 5 Found an even number 6 Found an odd number 7 Found an even number 8 Found an odd number 9 4.5. pass Statements The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action. For example: >>> while True:  pass # Busy-wait for keyboard interrupt (Ctrl+C) This is commonly used for creating minimal classes: >>> class MyEmptyClass:  pass Another place pass can be used is as a place-holder for a function or conditional body when you are working on new code, allowing you to keep thinking at a more abstract level. The pass is silently ignored: >>> def initlog(*args):  pass # Remember to implement this! 4.6. match Statements A match statement takes an expression and compares its value to successive patterns given as one or more case blocks. This is superficially similar to a switch statement in C, Java or JavaScript (and many other languages), but it’s more similar to pattern matching in languages like Rust or Haskell. Only the first pattern that matches gets executed and it can also extract components (sequence elements or object attributes) from the value into variables. The simplest form compares a subject value against one or more literals: def http_error(status):  match status:   case 400:    return ""Bad request""   case 404:    return ""Not found""   case 418:    return ""I'm a teapot""   case _:    return ""Something's wrong with the internet"" Note the last block: the “variable name” _ acts as a wildcard and never fails to match. If no case matches, none of the branches is executed. You can combine several literals in a single pattern using | (“or”): case 401 | 403 | 404:  return ""Not allowed"" Patterns can look like unpacking assignments, and can be used to bind variables: # point is an (x, y) tuple match point:  case (0, 0):   print(""Origin"")  case (0, y):   print(f""Y={y}"")  case (x, 0):   print(f""X={x}"")  case (x, y):   print(f""X={x}, Y={y}"")  case _:   raise ValueError(""Not a point"") Study that one carefully! The first pattern has two literals, and can be thought of as an extension of the literal pattern shown above. But the next two patterns combine a literal and a variable, and the variable binds a value from the subject (point). The fourth pattern captures two values, which makes it conceptually similar to the unpacking assignment (x, y) = point. If you are using classes to structure your data you can use the class name followed by an argument list resembling a constructor, but with the ability to capture attributes into variables: class Point:  def __init__(self, x, y):   self.x = x   self.y = y def where_is(point):  match point:   case Point(x=0, y=0):    print(""Origin"")   case Point(x=0, y=y):    print(f""Y={y}"")   case Point(x=x, y=0):    print(f""X={x}"")   case Point():    print(""Somewhere else"")   case _:    print(""Not a point"") You can use positional parameters with some builtin classes that provide an ordering for their attributes (e.g. dataclasses). You can also define a specific position for attributes in patterns by setting the __match_args__ special attribute in your classes. If it’s set to (“x”, “y”), the following patterns are all equivalent (and all bind the y attribute to the var variable): Point(1, var) Point(1, y=var) Point(x=1, y=var) Point(y=var, x=1) A recommended way to read patterns is to look at them as an extended form of what you would put on the left of an assignment, to understand which variables would be set to what. Only the standalone names (like var above) are assigned to by a match statement. Dotted names (like foo.bar), attribute names (the x= and y= above) or class names (recognized by the “(…)” next to them like Point above) are never assigned to. Patterns can be arbitrarily nested. For example, if we have a short list of Points, with __match_args__ added, we could match it like this: class Point:  __match_args__ = ('x', 'y')  def __init__(self, x, y):   self.x = x   self.y = y match points:  case []:   print(""No points"")  case [Point(0, 0)]:   print(""The origin"")  case [Point(x, y)]:   print(f""Single point {x}, {y}"")  case [Point(0, y1), Point(0, y2)]:   print(f""Two on the Y axis at {y1}, {y2}"")  case _:   print(""Something else"") We can add an if clause to a pattern, known as a “guard”. If the guard is false, match goes on to try the next case block. Note that value capture happens before the guard is evaluated: match point:  case Point(x, y) if x == y:   print(f""Y=X at {x}"")  case Point(x, y):   print(f""Not on the diagonal"") Several other key features of this statement:  Like unpacking assignments, tuple and list patterns have exactly the same meaning and actually match arbitrary sequences. An important exception is that they don’t match iterators or strings.  Sequence patterns support extended unpacking: [x, y, *rest] and (x, y, *rest) work similar to unpacking assignments. The name after * may also be _, so (x, y, *_) matches a sequence of at least two items without binding the remaining items.  Mapping patterns: {""bandwidth"": b, ""latency"": l} captures the ""bandwidth"" and ""latency"" values from a dictionary. Unlike sequence patterns, extra keys are ignored. An unpacking like **rest is also supported. (But **_ would be redundant, so it is not allowed.)  Subpatterns may be captured using the as keyword:  case (Point(x1, y1), Point(x2, y2) as p2): ...  will capture the second element of the input as p2 (as long as the input is a sequence of two points)  Most literals are compared by equality, however the singletons True, False and None are compared by identity.  Patterns may use named constants. These must be dotted names to prevent them from being interpreted as capture variable:  from enum import Enum  class Color(Enum):   RED = 'red'   GREEN = 'green'   BLUE = 'blue'  color = Color(input(""Enter your choice of 'red', 'blue' or 'green': ""))  match color:   case Color.RED:    print(""I see red!"")   case Color.GREEN:    print(""Grass is green"")   case Color.BLUE:    print(""I'm feeling the blues :("") For a more detailed explanation and additional examples, you can look into PEP 636 which is written in a tutorial format. 4.7. Defining Functions We can create a function that writes the Fibonacci series to an arbitrary boundary: >>> def fib(n): # write Fibonacci series up to n  """"""Print a Fibonacci series up to n.""""""  a, b = 0, 1  while a < n:   print(a, end=' ')   a, b = b, a+b  print() # Now call the function we just defined: fib(2000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 The keyword def introduces a function definition. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented. The first statement of the function body can optionally be a string literal; this string literal is the function’s documentation string, or docstring. (More about docstrings can be found in the section Documentation Strings.) There are tools which use docstrings to automatically produce online or printed documentation, or to let the user interactively browse through code; it’s good practice to include docstrings in code that you write, so make a habit of it. The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables and variables of enclosing functions cannot be directly assigned a value within a function (unless, for global variables, named in a global statement, or, for variables of enclosing functions, named in a nonlocal statement), although they may be referenced. The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using call by value (where the value is always an object reference, not the value of the object). [1] When a function calls another function, or calls itself recursively, a new local symbol table is created for that call. A function definition associates the function name with the function object in the current symbol table. The interpreter recognizes the object pointed to by that name as a user-defined function. Other names can also point to that same function object and can also be used to access the function: >>> fib <function fib at 10042ed0> f = fib f(100) 0 1 1 2 3 5 8 13 21 34 55 89 Coming from other languages, you might object that fib is not a function but a procedure since it doesn’t return a value. In fact, even functions without a return statement do return a value, albeit a rather boring one. This value is called None (it’s a built-in name). Writing the value None is normally suppressed by the interpreter if it would be the only value written. You can see it if you really want to using print(): >>> fib(0) print(fib(0)) None It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it: >>> def fib2(n): # return Fibonacci series up to n  """"""Return a list containing the Fibonacci series up to n.""""""  result = []  a, b = 0, 1  while a < n:   result.append(a) # see below   a, b = b, a+b  return result f100 = fib2(100) # call it f100    # write the result [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] This example, as usual, demonstrates some new Python features:  The return statement returns with a value from a function. return without an expression argument returns None. Falling off the end of a function also returns None.  The statement result.append(a) calls a method of the list object result. A method is a function that ‘belongs’ to an object and is named obj.methodname, where obj is some object (this may be an expression), and methodname is the name of a method that is defined by the object’s type. Different types define different methods. Methods of different types may have the same name without causing ambiguity. (It is possible to define your own object types and methods, using classes, see Classes) The method append() shown in the example is defined for list objects; it adds a new element at the end of the list. In this example it is equivalent to result = result + [a], but more efficient. 4.8. More on Defining Functions It is also possible to define functions with a variable number of arguments. There are three forms, which can be combined. 4.8.1. Default Argument Values The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow. For example: def ask_ok(prompt, retries=4, reminder='Please try again!'):  while True:   reply = input(prompt)   if reply in {'y', 'ye', 'yes'}:    return True   if reply in {'n', 'no', 'nop', 'nope'}:    return False   retries = retries - 1   if retries < 0:    raise ValueError('invalid user response')   print(reminder) This function can be called in several ways:  giving only the mandatory argument: ask_ok('Do you really want to quit?')  giving one of the optional arguments: ask_ok('OK to overwrite the file?', 2)  or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!') This example also introduces the in keyword. This tests whether or not a sequence contains a certain value. The default values are evaluated at the point of function definition in the defining scope, so that i = 5 def f(arg=i):  print(arg) i = 6 f() will print 5. Important warning: The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls: def f(a, L=[]):  L.append(a)  return L print(f(1)) print(f(2)) print(f(3)) This will print [1] [1, 2] [1, 2, 3] If you don’t want the default to be shared between subsequent calls, you can write the function like this instead: def f(a, L=None):  if L is None:   L = []  L.append(a)  return L 4.8.2. Keyword Arguments Functions can also be called using keyword arguments of the form kwarg=value. For instance, the following function: def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):  print(""-- This parrot wouldn't"", action, end=' ')  print(""if you put"", voltage, ""volts through it."")  print(""-- Lovely plumage, the"", type)  print(""-- It's"", state, ""!"") accepts one required argument (voltage) and three optional arguments (state, action, and type). This function can be called in any of the following ways: parrot(1000)           # 1 positional argument parrot(voltage=1000)         # 1 keyword argument parrot(voltage=1000000, action='VOOOOOM')    # 2 keyword arguments parrot(action='VOOOOOM', voltage=1000000)    # 2 keyword arguments parrot('a million', 'bereft of life', 'jump')   # 3 positional arguments parrot('a thousand', state='pushing up the daisies') # 1 positional, 1 keyword but all the following calls would be invalid: parrot()      # required argument missing parrot(voltage=5.0, 'dead') # non-keyword argument after a keyword argument parrot(110, voltage=220)  # duplicate value for the same argument parrot(actor='John Cleese') # unknown keyword argument In a function call, keyword arguments must follow positional arguments. All the keyword arguments passed must match one of the arguments accepted by the function (e.g. actor is not a valid argument for the parrot function), and their order is not important. This also includes non-optional arguments (e.g. parrot(voltage=1000) is valid too). No argument may receive a value more than once. Here’s an example that fails due to this restriction: >>> def function(a):  pass function(0, a=0) Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: function() got multiple values for argument 'a' When a final formal parameter of the form **name is present, it receives a dictionary (see Mapping Types — dict) containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form *name (described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list. (*name must occur before **name.) For example, if we define a function like this: def cheeseshop(kind, *arguments, **keywords):  print(""-- Do you have any"", kind, ""?"")  print(""-- I'm sorry, we're all out of"", kind)  for arg in arguments:   print(arg)  print(""-"" * 40)  for kw in keywords:   print(kw, "":"", keywords[kw]) It could be called like this: cheeseshop(""Limburger"", ""It's very runny, sir."",   ""It's really very, VERY runny, sir."",   shopkeeper=""Michael Palin"",   client=""John Cleese"",   sketch=""Cheese Shop Sketch"") and of course it would print: -- Do you have any Limburger ? -- I'm sorry, we're all out of Limburger It's very runny, sir. It's really very, VERY runny, sir. ---------------------------------------- shopkeeper : Michael Palin client : John Cleese sketch : Cheese Shop Sketch Note that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call. 4.8.3. Special parameters By default, arguments may be passed to a Python function either by position or explicitly by keyword. For readability and performance, it makes sense to restrict the way arguments can be passed so that a developer need only look at the function definition to determine if items are passed by position, by position or keyword, or by keyword. A function definition may look like: def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):  ----------- ----------  ----------   |    |     |   |  Positional or keyword |   |        - Keyword only   -- Positional only where / and * are optional. If used, these symbols indicate the kind of parameter by how the arguments may be passed to the function: positional-only, positional-or-keyword, and keyword-only. Keyword parameters are also referred to as named parameters. 4.8.3.1. Positional-or-Keyword Arguments If / and * are not present in the function definition, arguments may be passed to a function by position or by keyword. 4.8.3.2. Positional-Only Parameters Looking at this in a bit more detail, it is possible to mark certain parameters as positional-only. If positional-only, the parameters’ order matters, and the parameters cannot be passed by keyword. Positional-only parameters are placed before a / (forward-slash). The / is used to logically separate the positional-only parameters from the rest of the parameters. If there is no / in the function definition, there are no positional-only parameters. Parameters following the / may be positional-or-keyword or keyword-only. 4.8.3.3. Keyword-Only Arguments To mark parameters as keyword-only, indicating the parameters must be passed by keyword argument, place an * in the arguments list just before the first keyword-only parameter. 4.8.3.4. Function Examples Consider the following example function definitions paying close attention to the markers / and *: >>> def standard_arg(arg):  print(arg) def pos_only_arg(arg, /):  print(arg) def kwd_only_arg(*, arg):  print(arg) def combined_example(pos_only, /, standard, *, kwd_only):  print(pos_only, standard, kwd_only) The first function definition, standard_arg, the most familiar form, places no restrictions on the calling convention and arguments may be passed by position or keyword: >>> standard_arg(2) 2 standard_arg(arg=2) 2 The second function pos_only_arg is restricted to only use positional parameters as there is a / in the function definition: >>> pos_only_arg(1) 1 pos_only_arg(arg=1) Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg' The third function kwd_only_args only allows keyword arguments as indicated by a * in the function definition: >>> kwd_only_arg(3) Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given kwd_only_arg(arg=3) 3 And the last uses all three calling conventions in the same function definition: >>> combined_example(1, 2, 3) Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: combined_example() takes 2 positional arguments but 3 were given combined_example(1, 2, kwd_only=3) 1 2 3 combined_example(1, standard=2, kwd_only=3) 1 2 3 combined_example(pos_only=1, standard=2, kwd_only=3) Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: combined_example() got some positional-only arguments passed as keyword arguments: 'pos_only' Finally, consider this function definition which has a potential collision between the positional argument name and **kwds which has name as a key: def foo(name, **kwds):  return 'name' in kwds There is no possible call that will make it return True as the keyword 'name' will always bind to the first parameter. For example: >>> foo(1, **{'name': 2}) Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: foo() got multiple values for argument 'name' But using / (positional only arguments), it is possible since it allows name as a positional argument and 'name' as a key in the keyword arguments: >>> def foo(name, /, **kwds):  return 'name' in kwds foo(1, **{'name': 2}) True In other words, the names of positional-only parameters can be used in **kwds without ambiguity. 4.8.3.5. Recap The use case will determine which parameters to use in the function definition: def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2): As guidance:  Use positional-only if you want the name of the parameters to not be available to the user. This is useful when parameter names have no real meaning, if you want to enforce the order of the arguments when the function is called or if you need to take some positional parameters and arbitrary keywords.  Use keyword-only when names have meaning and the function definition is more understandable by being explicit with names or you want to prevent users relying on the position of the argument being passed.  For an API, use positional-only to prevent breaking API changes if the parameter’s name is modified in the future. 4.8.4. Arbitrary Argument Lists Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple (see Tuples and Sequences). Before the variable number of arguments, zero or more normal arguments may occur. def write_multiple_items(file, separator, *args):  file.write(separator.join(args)) Normally, these variadic arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the *args parameter are ‘keyword-only’ arguments, meaning that they can only be used as keywords rather than positional arguments. >>> def concat(*args, sep=""/""):  return sep.join(args) concat(""earth"", ""mars"", ""venus"") 'earth/mars/venus' concat(""earth"", ""mars"", ""venus"", sep=""."") 'earth.mars.venus' 4.8.5. Unpacking Argument Lists The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple: >>> list(range(3, 6))   # normal call with separate arguments [3, 4, 5] args = [3, 6] list(range(*args))   # call with arguments unpacked from a list [3, 4, 5] In the same fashion, dictionaries can deliver keyword arguments with the **-operator: >>> def parrot(voltage, state='a stiff', action='voom'):  print(""-- This parrot wouldn't"", action, end=' ')  print(""if you put"", voltage, ""volts through it."", end=' ')  print(""E's"", state, ""!"") d = {""voltage"": ""four million"", ""state"": ""bleedin' demised"", ""action"": ""VOOM""} parrot(**d) -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised ! 4.8.6. Lambda Expressions Small anonymous functions can be created with the lambda keyword. This function returns the sum of its two arguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, lambda functions can reference variables from the containing scope: >>> def make_incrementor(n):  return lambda x: x + n f = make_incrementor(42) f(0) 42 f(1) 43 The above example uses a lambda expression to return a function. Another use is to pass a small function as an argument: >>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')] pairs.sort(key=lambda pair: pair[1]) pairs [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')] 4.8.7. Documentation Strings Here are some conventions about the content and formatting of documentation strings. The first line should always be a short, concise summary of the object’s purpose. For brevity, it should not explicitly state the object’s name or type, since these are available by other means (except if the name happens to be a verb describing a function’s operation). This line should begin with a capital letter and end with a period. If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc. The Python parser does not strip indentation from multi-line string literals in Python, so tools that process documentation have to strip indentation if desired. This is done using the following convention. The first non-blank line after the first line of the string determines the amount of indentation for the entire documentation string. (We can’t use the first line since it is generally adjacent to the string’s opening quotes so its indentation is not apparent in the string literal.) Whitespace “equivalent” to this indentation is then stripped from the start of all lines of the string. Lines that are indented less should not occur, but if they occur all their leading whitespace should be stripped. Equivalence of whitespace should be tested after expansion of tabs (to 8 spaces, normally). Here is an example of a multi-line docstring: >>> def my_function():  """"""Do nothing, but document it.  No, really, it doesn't do anything.  """"""  pass print(my_function.__doc__) Do nothing, but document it.  No, really, it doesn't do anything. 4.8.8. Function Annotations Function annotations are completely optional metadata information about the types used by user-defined functions (see PEP 3107 and PEP 484 for more information). Annotations are stored in the __annotations__ attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal ->, followed by an expression, between the parameter list and the colon denoting the end of the def statement. The following example has a required argument, an optional argument, and the return value annotated: >>> def f(ham: str, eggs: str = 'eggs') -> str:  print(""Annotations:"", f.__annotations__)  print(""Arguments:"", ham, eggs)  return ham + ' and ' + eggs f('spam') Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>} Arguments: spam eggs 'spam and eggs' 4.9. Intermezzo: Coding Style Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about coding style. Most languages can be written (or more concise, formatted) in different styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that. For Python, PEP 8 has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Every Python developer should read it at some point; here are the most important points extracted for you:  Use 4-space indentation, and no tabs.  4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.  Wrap lines so that they don’t exceed 79 characters.  This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.  Use blank lines to separate functions and classes, and larger blocks of code inside functions.  When possible, put comments on a line of their own.  Use docstrings.  Use spaces around operators and after commas, but not directly inside bracketing constructs: a = f(1, 2) + g(3, 4).  Name your classes and functions consistently; the convention is to use UpperCamelCase for classes and lowercase_with_underscores for functions and methods. Always use self as the name for the first method argument (see A First Look at Classes for more on classes and methods).  Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case.  Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code. Footnotes [1] Actually, call by object reference would be a better description, since if a mutable object is passed, the caller will see any changes the callee makes to it (items inserted into a list). "
2,,". 5. Data Structures This chapter describes some things you’ve learned about already in more detail, and adds some new things as well. 5.1. More on Lists The list data type has some more methods. Here are all of the methods of list objects: list.append(x)  Add an item to the end of the list. Equivalent to a[len(a):] = [x]. list.extend(iterable)  Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable. list.insert(i, x)  Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x). list.remove(x)  Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item. list.pop([i])  Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. It raises an IndexError if the list is empty or the index is outside the list range. list.clear()  Remove all items from the list. Equivalent to del a[:]. list.index(x[, start[, end]])  Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item.  The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument. list.count(x)  Return the number of times x appears in the list. list.sort(*, key=None, reverse=False)  Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation). list.reverse()  Reverse the elements of the list in place. list.copy()  Return a shallow copy of the list. Equivalent to a[:]. An example that uses most of the list methods: >>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana'] fruits.count('apple') 2 fruits.count('tangerine') 0 fruits.index('banana') 3 fruits.index('banana', 4) # Find next banana starting at position 4 6 fruits.reverse() fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange'] fruits.append('grape') fruits ['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape'] fruits.sort() fruits ['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear'] fruits.pop() 'pear' You might have noticed that methods like insert, remove or sort that only modify the list have no return value printed – they return the default None. [1] This is a design principle for all mutable data structures in Python. Another thing you might notice is that not all data can be sorted or compared. For instance, [None, 'hello', 10] doesn’t sort because integers can’t be compared to strings and None can’t be compared to other types. Also, there are some types that don’t have a defined ordering relation. For example, 3+4j < 5+7j isn’t a valid comparison. 5.1.1. Using Lists as Stacks The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”). To add an item to the top of the stack, use append(). To retrieve an item from the top of the stack, use pop() without an explicit index. For example: >>> stack = [3, 4, 5] stack.append(6) stack.append(7) stack [3, 4, 5, 6, 7] stack.pop() 7 stack [3, 4, 5, 6] stack.pop() 6 stack.pop() 5 stack [3, 4] 5.1.2. Using Lists as Queues It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”); however, lists are not efficient for this purpose. While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one). To implement a queue, use collections.deque which was designed to have fast appends and pops from both ends. For example: >>> from collections import deque queue = deque([""Eric"", ""John"", ""Michael""]) queue.append(""Terry"")   # Terry arrives queue.append(""Graham"")   # Graham arrives queue.popleft()     # The first to arrive now leaves 'Eric' queue.popleft()     # The second to arrive now leaves 'John' queue       # Remaining queue in order of arrival deque(['Michael', 'Terry', 'Graham']) 5.1.3. List Comprehensions List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition. For example, assume we want to create a list of squares, like: >>> squares = [] for x in range(10):  squares.append(x**2) squares [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] Note that this creates (or overwrites) a variable named x that still exists after the loop completes. We can calculate the list of squares without any side effects using: squares = list(map(lambda x: x**2, range(10))) or, equivalently: squares = [x**2 for x in range(10)] which is more concise and readable. A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal: >>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y] [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)] and it’s equivalent to: >>> combs = [] for x in [1,2,3]:  for y in [3,1,4]:   if x != y:    combs.append((x, y)) combs [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)] Note how the order of the for and if statements is the same in both these snippets. If the expression is a tuple (e.g. the (x, y) in the previous example), it must be parenthesized. >>> vec = [-4, -2, 0, 2, 4] # create a new list with the values doubled [x*2 for x in vec] [-8, -4, 0, 4, 8] # filter the list to exclude negative numbers [x for x in vec if x >= 0] [0, 2, 4] # apply a function to all the elements [abs(x) for x in vec] [4, 2, 0, 2, 4] # call a method on each element freshfruit = [' banana', ' loganberry ', 'passion fruit '] [weapon.strip() for weapon in freshfruit] ['banana', 'loganberry', 'passion fruit'] # create a list of 2-tuples like (number, square) [(x, x**2) for x in range(6)] [(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)] # the tuple must be parenthesized, otherwise an error is raised [x, x**2 for x in range(6)] File ""<stdin>"", line 1  [x, x**2 for x in range(6)]  ^^^^^^^ SyntaxError: did you forget parentheses around the comprehension target? # flatten a list using a listcomp with two 'for' vec = [[1,2,3], [4,5,6], [7,8,9]] [num for elem in vec for num in elem] [1, 2, 3, 4, 5, 6, 7, 8, 9] List comprehensions can contain complex expressions and nested functions: >>> from math import pi [str(round(pi, i)) for i in range(1, 6)] ['3.1', '3.14', '3.142', '3.1416', '3.14159'] 5.1.4. Nested List Comprehensions The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension. Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4: >>> matrix = [  [1, 2, 3, 4],  [5, 6, 7, 8],  [9, 10, 11, 12], ] The following list comprehension will transpose rows and columns: >>> [[row[i] for row in matrix] for i in range(4)] [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] As we saw in the previous section, the inner list comprehension is evaluated in the context of the for that follows it, so this example is equivalent to: >>> transposed = [] for i in range(4):  transposed.append([row[i] for row in matrix]) transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] which, in turn, is the same as: >>> transposed = [] for i in range(4):  # the following 3 lines implement the nested listcomp  transposed_row = []  for row in matrix:   transposed_row.append(row[i])  transposed.append(transposed_row) transposed [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]] In the real world, you should prefer built-in functions to complex flow statements. The zip() function would do a great job for this use case: >>> list(zip(*matrix)) [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)] See Unpacking Argument Lists for details on the asterisk in this line. 5.2. The del statement There is a way to remove an item from a list given its index instead of its value: the del statement. This differs from the pop() method which returns a value. The del statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice). For example: >>> a = [-1, 1, 66.25, 333, 333, 1234.5] del a[0] a [1, 66.25, 333, 333, 1234.5] del a[2:4] a [1, 66.25, 1234.5] del a[:] a [] del can also be used to delete entire variables: >>> del a Referencing the name a hereafter is an error (at least until another value is assigned to it). We’ll find other uses for del later. 5.3. Tuples and Sequences We saw that lists and strings have many common properties, such as indexing and slicing operations. They are two examples of sequence data types (see Sequence Types — list, tuple, range). Since Python is an evolving language, other sequence data types may be added. There is also another standard sequence data type: the tuple. A tuple consists of a number of values separated by commas, for instance: >>> t = 12345, 54321, 'hello!' t[0] 12345 t (12345, 54321, 'hello!') # Tuples may be nested: u = t, (1, 2, 3, 4, 5) u ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5)) # Tuples are immutable: t[0] = 88888 Traceback (most recent call last): File ""<stdin>"", line 1, in <module> TypeError: 'tuple' object does not support item assignment # but they can contain mutable objects: v = ([1, 2, 3], [3, 2, 1]) v ([1, 2, 3], [3, 2, 1]) As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists. Though tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are immutable, and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of namedtuples). Lists are mutable, and their elements are usually homogeneous and are accessed by iterating over the list. A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective. For example: >>> empty = () singleton = 'hello', # <-- note trailing comma len(empty) 0 len(singleton) 1 singleton ('hello',) The statement t = 12345, 54321, 'hello!' is an example of tuple packing: the values 12345, 54321 and 'hello!' are packed together in a tuple. The reverse operation is also possible: >>> x, y, z = t This is called, appropriately enough, sequence unpacking and works for any sequence on the right-hand side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and sequence unpacking. 5.4. Sets Python also includes a data type for sets. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. Curly braces or the set() function can be used to create sets. Note: to create an empty set you have to use set(), not {}; the latter creates an empty dictionary, a data structure that we discuss in the next section. Here is a brief demonstration: >>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'} print(basket)      # show that duplicates have been removed {'orange', 'banana', 'pear', 'apple'} 'orange' in basket     # fast membership testing True 'crabgrass' in basket False # Demonstrate set operations on unique letters from two words a = set('abracadabra') b = set('alacazam') a         # unique letters in a {'a', 'r', 'b', 'c', 'd'} a - b        # letters in a but not in b {'r', 'd', 'b'} a | b        # letters in a or b or both {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'} a & b        # letters in both a and b {'a', 'c'} a ^ b        # letters in a or b but not both {'r', 'd', 'b', 'm', 'z', 'l'} Similarly to list comprehensions, set comprehensions are also supported: >>> a = {x for x in 'abracadabra' if x not in 'abc'} a {'r', 'd'} 5.5. Dictionaries Another useful data type built into Python is the dictionary (see Mapping Types — dict). Dictionaries are sometimes found in other languages as “associative memories” or “associative arrays”. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can’t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like append() and extend(). It is best to think of a dictionary as a set of key: value pairs, with the requirement that the keys are unique (within one dictionary). A pair of braces creates an empty dictionary: {}. Placing a comma-separated list of key:value pairs within the braces adds initial key:value pairs to the dictionary; this is also the way dictionaries are written on output. The main operations on a dictionary are storing a value with some key and extracting the value given the key. It is also possible to delete a key:value pair with del. If you store using a key that is already in use, the old value associated with that key is forgotten. It is an error to extract a value using a non-existent key. Performing list(d) on a dictionary returns a list of all the keys used in the dictionary, in insertion order (if you want it sorted, just use sorted(d) instead). To check whether a single key is in the dictionary, use the in keyword. Here is a small example using a dictionary: >>> tel = {'jack': 4098, 'sape': 4139} tel['guido'] = 4127 tel {'jack': 4098, 'sape': 4139, 'guido': 4127} tel['jack'] 4098 del tel['sape'] tel['irv'] = 4127 tel {'jack': 4098, 'guido': 4127, 'irv': 4127} list(tel) ['jack', 'guido', 'irv'] sorted(tel) ['guido', 'irv', 'jack'] 'guido' in tel True 'jack' not in tel False The dict() constructor builds dictionaries directly from sequences of key-value pairs: >>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)]) {'sape': 4139, 'guido': 4127, 'jack': 4098} In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions: >>> {x: x**2 for x in (2, 4, 6)} {2: 4, 4: 16, 6: 36} When the keys are simple strings, it is sometimes easier to specify pairs using keyword arguments: >>> dict(sape=4139, guido=4127, jack=4098) {'sape': 4139, 'guido': 4127, 'jack': 4098} 5.6. Looping Techniques When looping through dictionaries, the key and corresponding value can be retrieved at the same time using the items() method. >>> knights = {'gallahad': 'the pure', 'robin': 'the brave'} for k, v in knights.items():  print(k, v) gallahad the pure robin the brave When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the enumerate() function. >>> for i, v in enumerate(['tic', 'tac', 'toe']):  print(i, v) 0 tic 1 tac 2 toe To loop over two or more sequences at the same time, the entries can be paired with the zip() function. >>> questions = ['name', 'quest', 'favorite color'] answers = ['lancelot', 'the holy grail', 'blue'] for q, a in zip(questions, answers):  print('What is your {0}? It is {1}.'.format(q, a)) What is your name? It is lancelot. What is your quest? It is the holy grail. What is your favorite color? It is blue. To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the reversed() function. >>> for i in reversed(range(1, 10, 2)):  print(i) 9 7 5 3 1 To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving the source unaltered. >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] for i in sorted(basket):  print(i) apple apple banana orange orange pear Using set() on a sequence eliminates duplicate elements. The use of sorted() in combination with set() over a sequence is an idiomatic way to loop over unique elements of the sequence in sorted order. >>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] for f in sorted(set(basket)):  print(f) apple banana orange pear It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead. >>> import math raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8] filtered_data = [] for value in raw_data:  if not math.isnan(value):   filtered_data.append(value) filtered_data [56.2, 51.7, 55.3, 52.5, 47.8] 5.7. More on Conditions The conditions used in while and if statements can contain any operators, not just comparisons. The comparison operators in and not in are membership tests that determine whether a value is in (or not in) a container. The operators is and is not compare whether two objects are really the same object. All comparison operators have the same priority, which is lower than that of all numerical operators. Comparisons can be chained. For example, a < b == c tests whether a is less than b and moreover b equals c. Comparisons may be combined using the Boolean operators and and or, and the outcome of a comparison (or of any other Boolean expression) may be negated with not. These have lower priorities than comparison operators; between them, not has the highest priority and or the lowest, so that A and not B or C is equivalent to (A and (not B)) or C. As always, parentheses can be used to express the desired composition. The Boolean operators and and or are so-called short-circuit operators: their arguments are evaluated from left to right, and evaluation stops as soon as the outcome is determined. For example, if A and C are true but B is false, A and B and C does not evaluate the expression C. When used as a general value and not as a Boolean, the return value of a short-circuit operator is the last evaluated argument. It is possible to assign the result of a comparison or other Boolean expression to a variable. For example, >>> string1, string2, string3 = '', 'Trondheim', 'Hammer Dance' non_null = string1 or string2 or string3 non_null 'Trondheim' Note that in Python, unlike C, assignment inside expressions must be done explicitly with the walrus operator :=. This avoids a common class of problems encountered in C programs: typing = in an expression when == was intended. 5.8. Comparing Sequences and Other Types Sequence objects typically may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one. Lexicographical ordering for strings uses the Unicode code point number to order individual characters. Some examples of comparisons between sequences of the same type: (1, 2, 3)    < (1, 2, 4) [1, 2, 3]    < [1, 2, 4] 'ABC' < 'C' < 'Pascal' < 'Python' (1, 2, 3, 4)   < (1, 2, 4) (1, 2)     < (1, 2, -1) (1, 2, 3)    == (1.0, 2.0, 3.0) (1, 2, ('aa', 'ab')) < (1, 2, ('abc', 'a'), 4) Note that comparing objects of different types with < or > is legal provided that the objects have appropriate comparison methods. For example, mixed numeric types are compared according to their numeric value, so 0 equals 0.0, etc. Otherwise, rather than providing an arbitrary ordering, the interpreter will raise a TypeError exception. Footnotes [1] Other languages may return the mutated object, which allows method chaining, such as d->insert(""a"")-"
